#version 420
vec3 encodeNormal(in vec3 normal) {
	vec3 result;
	result = normal * 0.5 + 0.5;
	return result;
}



//	surface textures:
uniform vec4 color;

//	surface properties:
uniform vec3 uDiffuseColor = vec3(1.0);
uniform float uSpecularLevel = 1.0;
uniform float uSpecularExponent = 1.0;
uniform float uMetallicLevel = 1.0;
uniform vec2 uDetailTexScale = vec2(2.5);

in VertexDataT {
	smooth vec3 viewPosition; // view space position
	smooth vec2 texcoord; // copied through from aTexcoord
	smooth mat3 tangentViewMatrix; // tangent->view space matrix
	noperspective vec3 viewRay; // ray to far plane (use linear interpolation)
	smooth vec3 texcoords2;
	smooth vec3 normals;
} vertexIn;
	
layout(location=0) out vec4 fAlbedoSpecularColor;
layout(location=1) out vec4 fMaterialProperties;
layout(location=2) out vec4 fGeometricProperties;


/*----------------------------------------------------------------------------*/
void main() {
//	get surface properties:
	vec4 kd = color;

	vec3 n = vertexIn.normals;	
	float ks = 0.1;
	float ke = 0.1;
	float km = 0.1;

//	output results:
	fAlbedoSpecularColor = kd;
	fMaterialProperties = vec4(ks, ke, km, 1.0);
	
	fGeometricProperties.rgb = encodeNormal(n);
	fGeometricProperties.a = 1.0;
}

